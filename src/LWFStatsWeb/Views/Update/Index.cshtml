@model LWFStatsWeb.Models.UpdateViewModels.IndexViewModel

@{
    ViewBag.Title = "Update";
}

<h2>Update</h2>

<div class="alerts">
    @foreach (var error in Model.Errors)
    {
        <div class="alert alert-warning">
            <strong>Warning: </strong>@error
        </div>
    }
</div>

@{
    var task_delim = false;
    var insert_count = 0;
    var update_count = 0;
    var delete_count = 0;
}
@foreach (var task in Model.Tasks)
{
    if (task.Mode == UpdateTaskMode.Update)
    {
        update_count++;
    }
    else if (task.Mode == UpdateTaskMode.Insert)
    {
        insert_count++;
    }
    else if (task.Mode == UpdateTaskMode.Delete)
    {
        delete_count++;
    }
}

<div>
    <dl class="dl-horizontal">
    <dt>
        Inserts
    </dt>
    <dd class="count-insert">
        @insert_count
    </dd>
    <dt>
        Updates
    </dt>
    <dd class="count-update">
        @update_count
    </dd>
    <dt>
        Deletes
    </dt>
    <dd class="count-delete">
        @delete_count
    </dd>
    </dl>
</div>

<div class="progress hidden">
    <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="0"
         aria-valuemin="0" aria-valuemax="100" style="width:0%">
    </div>
</div>

<p>
    <button id="confirm-btn" type="button" class="btn btn-primary">Confirm</button>
</p>

@section scripts {
    <script type="text/javascript">

        var updates_remaining = @insert_count + @update_count + @delete_count;
        var total_updates = updates_remaining + 1;
        var updates_done = 0;
        var update_threads = 8;
        var update_finished = 0;

        var tasks = [
        @foreach (var task in Model.Tasks)
        {
            if(task_delim)
            {
                @:,'@task.ID'
            }
            else
            {
                task_delim = true;
                @:'@task.ID'
            }
        }
        ].reverse();

        function updateTask() {

            if(tasks.length > 0)
            {
                $.getJSON('@Url.Action("UpdateTask","Update")/' + tasks.pop(),updateTaskCallback);
            }
            else if( updates_remaining == 0 && update_finished == 0)
            {
                update_finished = 1;
                $(".progress-bar").text("Finishing up");
                $.getJSON('/Update/UpdateFinished',updateFinishedCallback);
            }
        }

        function updateProgress(message) {

            if (message)
                $(".progress-bar").text(message);

            var progress = Math.round(++updates_done * 100 / total_updates);

            $(".progress-bar").attr("aria-valuenow", progress);
            $(".progress-bar").attr("style", "width:" + progress + "%");
        }

        function updateTaskCallback(data) {
            if (data && data.id) {
                if(!data.status)
                    $(".alerts").append($("<div class='alert alert-danger'><strong>Error: </strong></div>").append($("<span></span>").text(data.message)));
                updateProgress(data.message);
                updates_remaining--;
                updateTask();
            }
        }

        function updateFinishedCallback(data) {
            updateProgress(data.message);
        }

        $(function () {
            $("#confirm-btn").click(function () {
                $(this).addClass('disabled');
                $(".progress").removeClass('hidden');
                for (var i = 0; i < update_threads; i++)
                    updateTask();
            });
        });

    </script>
}